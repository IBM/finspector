{"version":3,"file":"lib_index_js.b58cb5e484a15f10710d.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AACsH;AAC7B;AACzF,8BAA8B,mFAA2B,CAAC,wGAAqC;AAC/F;AACA,iFAAiF,SAAS,kCAAkC,WAAW,oCAAoC,GAAG,qBAAqB,SAAS,0BAA0B,WAAW,4BAA4B,GAAG,OAAO,sFAAsF,KAAK,sBAAsB,uBAAuB,OAAO,KAAK,sBAAsB,uBAAuB,iEAAiE,SAAS,kCAAkC,WAAW,oCAAoC,GAAG,qBAAqB,SAAS,0BAA0B,WAAW,4BAA4B,GAAG,mBAAmB;AAC3uB;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;ACP1B;;AAEN;AACP;AACA;AACA,uBAAuB;AACvB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;AC9IsE;AAC7C;AACF;AACvB,gBAAgB,+CAAC;AACjB,WAAW,+CAAC;AACO;AACnB;;;AAGA,SAAS,mBAAO,CAAC,kCAAY;AAC7B,SAAS,mBAAO,CAAC,0CAAgB;AACjC,SAAS,mBAAO,CAAC,0CAAgB;AACjC,SAAS,mBAAO,CAAC,kCAAY;AAC7B,SAAS,mBAAO,CAAC,oCAAa;AAC9B,SAAS,mBAAO,CAAC,sCAAc;AAC/B,YAAY,+BAAE;AACd;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEO,iCAAiC,iEAAc;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,gCAAgC,gEAAa;AACpD;AACA;;AAEA;AACA;AACA,6CAA6C,oBAAoB;AACjE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B;;AAE3B;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,QAAQ,sCAAS;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrIA;;AAEmE;AAC3B;;;;;;;;;;;;;;;ACH3B;AACb;AACA;AACA,4CAA4C,qBAAqB;AACjE;;AAEA;AACA;AACA;;AAEA;AACO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;;AC/Ha;;AAEN;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,QAAQ,oDAAoD;;AAE5G;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA,KAAK;;AAEL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;;;;;;;;;;;;;;ACxKa;;AAEN;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA,UAAU;AACV;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;AACA;AACA;AACA,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,MAAM;;AAEN;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,MAAM;;AAEN;AACA;;AAEA,GAAG;;AAEH,EAAE;;AAEF;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;ACxaa;;AAEU;AACJ;AACE;AACrB,gBAAgB,+CAAC;AACjB,WAAW,+CAAC;;AAEL;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,0BAA0B;;AAE1B;AACA;;AAEA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,0BAA0B;AAC1B;;AAEA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uDAAuD,iBAAiB;AACxE;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,OAAO;AACP;;AAEA;;;;;;;;;;;;;;;ACpPa;;AAEN;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2KAA2K,cAAc;AACzL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA,2KAA2K,cAAc;;AAEzL;;AAEA;AACA;AACA;AACA;AACA,2KAA2K,cAAc;AACzL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA,mHAAmH,cAAc;;AAEjI;AACA,6CAA6C,oCAAoC,GAAG;AACpF;AACA;;AAEA;;AAEA,OAAO;;AAEP;;;;;;;;;;;;;;;;;ACjJyF;AACzF,YAAwF;;AAExF;;AAEA;AACA;;AAEA,aAAa,0GAAG,CAAC,uFAAO;;;;AAIxB,iEAAe,8FAAc,MAAM","sources":["webpack://finspector_js/./lib/custom.css","webpack://finspector_js/./lib/dashboard.js","webpack://finspector_js/./lib/finspector.js","webpack://finspector_js/./lib/index.js","webpack://finspector_js/./lib/lasso.js","webpack://finspector_js/./lib/project.js","webpack://finspector_js/./lib/raincloud.js","webpack://finspector_js/./lib/select.js","webpack://finspector_js/./lib/table.js","webpack://finspector_js/./lib/custom.css?8a6d"],"sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"/* Safari */\\n@-webkit-keyframes spin {\\n  0% { -webkit-transform: rotate(0deg); }\\n  100% { -webkit-transform: rotate(360deg); }\\n}\\n\\n@keyframes spin {\\n  0% { transform: rotate(0deg); }\\n  100% { transform: rotate(360deg); }\\n}\", \"\",{\"version\":3,\"sources\":[\"webpack://./lib/custom.css\"],\"names\":[],\"mappings\":\"AAAA,WAAW;AACX;EACE,KAAK,+BAA+B,EAAE;EACtC,OAAO,iCAAiC,EAAE;AAC5C;;AAEA;EACE,KAAK,uBAAuB,EAAE;EAC9B,OAAO,yBAAyB,EAAE;AACpC\",\"sourcesContent\":[\"/* Safari */\\n@-webkit-keyframes spin {\\n  0% { -webkit-transform: rotate(0deg); }\\n  100% { -webkit-transform: rotate(360deg); }\\n}\\n\\n@keyframes spin {\\n  0% { transform: rotate(0deg); }\\n  100% { transform: rotate(360deg); }\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\"use strict\";\n\nexport function DashBoard(flatData, vis_cols){\n  var _self = this;\n  \n  var category_dict = {'name': vis_cols['cat_col'], 'value': Array.from(new Set(flatData.map((item) => item[vis_cols['cat_col']]))).sort(d3.ascending)};\n  var colorCategoryScale = d3.scaleOrdinal().domain(category_dict['value']).range(d3.schemeTableau10);\n  var model_list = vis_cols['model_cols'];\n\n  set_up_div(vis_cols['body_el']);\n\n  var rc_node = d3.select(vis_cols['body_el']).select('#raincloud').node();\n  var tb_node = d3.select(vis_cols['body_el']).select('#table').node();\n  var se_node = d3.select(vis_cols['body_el']).select('#categoryList').node();\n  var eb_node = d3.select(vis_cols['body_el']).select('#embedding').node();\n\n  var rc = new RainCloud(rc_node, flatData, 600, 400, colorCategoryScale, vis_cols, rc_to_tb_filter);\n  var tb = new Table(tb_node, flatData, 600, 400, colorCategoryScale, vis_cols, tb_to_rc_highlight);\n  var se = new Select(se_node, category_dict, colorCategoryScale, vis_cols, se_to_rc_and_tb_highlight, se_to_rc_augment, se_to_rc_show);\n  var eb = new Project(eb_node, vis_cols['embedding'], 1200, 400, vis_cols, colorCategoryScale, eb_to_rc_tb_highlight, eb_to_all_filter);\n\n  function se_to_rc_show(object){\n    rc.show_item(object);\n  }\n\n  function tb_to_rc_highlight(hovered_index){\n    rc.highlight_item_by_index(hovered_index);\n    eb.highlight_item_by_index(hovered_index)\n  }\n\n  function eb_to_rc_tb_highlight(hovered_index){\n    rc.highlight_item_by_index(hovered_index);\n    tb.highlight_item_by_index(hovered_index);\n  }\n\n  function se_to_rc_and_tb_highlight(filtered_list){\n    rc.highlight_category(filtered_list);\n    tb.highlight_category(filtered_list);\n    eb.highlight_category(filtered_list, flatData);\n    // update colorLegend\n    updateColorLegend(filtered_list, colorCategoryScale);\n  }\n\n  function se_to_rc_augment(cat_spl_dict){\n    /* use the array of qi to draw boxes + labels & kernels */\n    /* toggle displays for kernels + boxes for all */\n    rc.augment_cat_and_spl(cat_spl_dict);\n  }\n\n  function rc_to_tb_filter(condition){\n    var filtered_data = flatData.slice();\n\n    Object.keys(condition).forEach(function(con){\n      filtered_data = filtered_data.filter(d=>( d[con] >= condition[con][0] && d[con] <= condition[con][1]));\n    })\n\n    var indices_list = filtered_data.map(d=>flatData.indexOf(d));\n\n    tb.filterBy(filtered_data);\n    rc.filterBy(filtered_data);\n    eb.adjust_opacity_by_list(indices_list);\n  }\n\n  function eb_to_all_filter(filtered_data){\n    var fd = flatData.filter((d,i)=>filtered_data.indexOf(i) >= 0);\n    rc.filterBy(fd);\n    var fd_ = (fd.length > 0)? fd: flatData.slice();\n    tb.filterBy(fd_);\n    eb.highlight_items_by_list_of_indices(filtered_data);\n  }\n\n  function updateColorLegend(filtered_list, colorCategoryScale){\n\n    d3.select(\"div#colorLegend\").selectAll(\"*\").remove();\n\n    var colorSpace = d3.select(\"div#colorLegend\")\n      .selectAll(\"div.colorLegend\")\n      .data(filtered_list.sort(d3.ascending))\n    .join(\"div\")\n      .attr(\"class\", \"colorLegend\")\n      .style(\"width\", \"200px\")\n      .style(\"height\", \"30px\")\n      .style(\"display\", \"flex\")\n      .style(\"justify-content\", \"center\")\n      .style(\"align-items\", \"flex-start\")\n      .style(\"align-content\", \"center\");\n\n    colorSpace.append(\"div\")\n      .style(\"width\", \"30px\")\n      .style(\"height\", \"30px\")\n      .style(\"background\", d=>colorCategoryScale(d));\n\n    colorSpace.append(\"div\")\n      .style(\"position\", \"left\")\n      .style(\"width\", \"150px\")\n      .style(\"height\", \"30px\")\n      .style(\"line-height\", \"30px\")\n      .style(\"vertical-align\", \"middle\")\n      .style(\"text-anchor\", \"left\")\n      .style(\"padding-left\", \"10px\")\n      .text(d=>d);\n\n  }\n\n  function set_up_div(element){\n\n    d3.select(element)\n          .append('div')\n          .attr(\"id\", \"categoryList\");\n\n    var container = d3.select(element)\n      .append(\"div\")\n        .attr(\"class\", \"vcontainer\")\n        .style(\"display\", \"flex\")\n        .style(\"justify-content\", \"center\")\n        .style(\"align-items\", \"flex-start\")\n        .style(\"align-content\", \"center\");\n\n    container.append(\"div\")\n    .attr(\"id\", \"colorLegend\")\n      .style(\"position\", \"absolute\")\n      .style(\"left\", \"50px\");\n\n    container.append(\"div\")\n    .attr(\"id\", \"raincloud\");\n\n    container.append(\"div\")\n    .attr(\"id\", \"table\");\n\n    var emb_container = d3.select(element)\n      .append(\"div\")\n        .attr(\"id\", \"embedding_container\")\n        .style(\"display\", \"flex\")\n        .style(\"justify-content\", \"center\")\n        .style(\"align-items\", \"flex-start\")\n        .style(\"align-content\", \"center\");\n\n    var emb = emb_container.append(\"div\")\n      .attr(\"id\", \"embedding\");\n\n  }\n\n}","import { DOMWidgetModel, DOMWidgetView } from '@jupyter-widgets/base';\nimport * as d3 from \"d3\";\nimport $ from 'jquery';\nwindow.jQuery = $;\nwindow.$ = $;\nimport 'bootstrap';\n// import 'jquery_multiselect';\n\n\nvar ls = require('./lasso.js')\nvar db = require('./dashboard.js')\nvar rc = require('./raincloud.js')\nvar tb = require('./table.js')\nvar sl = require('./select.js')\nvar eb = require('./project.js')\nwindow.d3 = d3;\nwindow.lasso = ls.lasso;\nwindow.DashBoard = db.DashBoard;\nwindow.RainCloud = rc.RainCloud;\nwindow.Table = tb.Table;\nwindow.Select = sl.Select;\nwindow.Project = eb.Project;\n\n// See example.py for the kernel counterpart to this file.\n\n// Custom Model. Custom widgets models must at least provide default values\n// for model attributes, including\n//\n//  - `_view_name`\n//  - `_view_module`\n//  - `_view_module_version`\n//\n//  - `_model_name`\n//  - `_model_module`\n//  - `_model_module_version`\n//\n//  when different from the base class.\n\n// When serialiazing the entire widget state for embedding, only values that\n// differ from the defaults will be serialized.\n\nexport class VisualizationModel extends DOMWidgetModel {\n    defaults() {\n      return {\n        ...super.defaults(),\n        _model_name : 'VisualizationModel',\n        _view_name : 'VisualizationView',\n        _model_module : 'finspector_js',\n        _view_module : 'finspector_js',\n        _model_module_version : '0.1.0',\n        _view_module_version : '0.1.0',\n        value : '',\n        textValue : '',\n        data: [],\n        embedding: [],\n        props: {},\n        inputValue: {},\n        sent_col: '',\n        cat_col: '',\n        spl_col: '',\n        model_cols: [],\n        other_cols: []\n      };\n    }\n  }\n\nexport class VisualizationView extends DOMWidgetView {\n    render() {\n        this.value_changed();\n\n        this._valueInput = document.createElement('input');\n        this._valueInput.type = 'text';\n        this._valueInput.id = `_hiddenVALUE${this.model.model_id}`;\n        this._valueInput.style.display = 'none';\n        // this._valueInput.value = this.model.get('value');\n        this._valueInput.value = this.model.get('textValue');\n        this._valueInput.oninput = this.value_input_changed.bind(this);\n        this.el.appendChild(this._valueInput);\n\n        // Observe and act on future changes to the value attribute\n        // this.model.on('change:data', this.value_changed, this);\n        // this.model.on('change:props', this.props_changed, this);\n        this.model.on('change:inputValue', this.iv_changed, this)\n        this.inputValue = {'sent': ''}\n\n        // this.iv_change();\n    }\n\n    iv_change = async function(){\n        // while (Object.keys(this.model.get('inputValue')).length === 0 || this.model.get('inputValue')['sent'] != this.model.get('value'))\n        while (Object.keys(this.model.get('inputValue')).length === 0 || this.model.get('inputValue')['sent'] != this.model.get('textValue'))\n            await __delay__(1000);\n\n        function __delay__(timer) {\n            return new Promise(resolve => {\n                timer = timer || 2000;\n                setTimeout(function () {\n                    resolve();\n                }, timer);\n            });\n        };\n    }\n\n    value_changed() {\n        // this.el.textContent = this.model.get('value');\n        this.el.textContent = this.model.get('textValue');\n        var data = this.model.get(\"data\");\n        // d3.select(this.el).selectAll(\"*\").remove();\n        d3.select(this.el).selectAll(\"*:not(#_hiddenVALUE\" + this.model.model_id + \")\").remove();\n\n        var vis_cols = {\n            'body_el': this.el, // element to append vis\n            'sent_col': this.model.get(\"sent_col\"), // column header of sentence\n            'cat_col': this.model.get(\"cat_col\"), // categorical header for colors\n            'spl_col': this.model.get(\"spl_col\"),\n            'model_cols': this.model.get(\"model_cols\"), // column headers of log probs\n            'other_cols': this.model.get(\"other_cols\"), // other cols to show in table \n            'model_id': this.model.model_id,\n            'embedding': this.model.get('embedding'),\n            'model': this.model\n        }\n\n        var db = new DashBoard(data, vis_cols);\n\n    }\n\n    value_input_changed() {\n        // textValue\n        // this.model.set('value', this._valueInput.value);\n        this.model.set('textValue', this._valueInput.value);\n        this.model.save_changes();\n        /* run something  and toss it to JS */\n    }\n}\n","// Export widget models and views, and the npm package version number.\n\nexport {VisualizationModel, VisualizationView} from './finspector';\nexport {version} from '../package.json';\n","\"use strict\";\n// https://github.com/skokenes/d3-lasso\nfunction polygonToPath(polygon) {\n  return (\"M\" + (polygon.map(function (d) { return d.join(','); }).join('L')));\n}\n\nfunction distance(pt1, pt2) {\n  return Math.sqrt(Math.pow( (pt2[0] - pt1[0]), 2 ) + Math.pow( (pt2[1] - pt1[1]), 2 ));\n}\n\n// export default function lasso() {\nexport function lasso() {\n  var dispatch = d3.dispatch('start', 'end');\n\n  // distance last point has to be to first point before it auto closes when mouse is released\n  var closeDistance = 75;\n\n  function lasso(root) {\n    // append a <g> with a rect\n    var bbox = root.node().getBoundingClientRect();\n    var g = root.append('g').attr('class', 'lasso-group');\n\n    var area = g\n      .append('rect')\n        .attr('width', root.attr(\"width\"))\n        .attr('height', root.attr(\"height\"))\n        .attr('fill', 'tomato')\n        .attr('opacity', 0);\n\n    var drag = d3\n      .drag()\n      .on('start', handleDragStart)\n      .on('drag', handleDrag)\n      .on('end', handleDragEnd);\n\n    area.call(drag);\n\n    var lassoPolygon;\n    var lassoPath;\n    var closePath;\n\n    function handleDragStart(event) {\n      var point = [event.x, event.y];\n      lassoPolygon = [point];\n\n      if (lassoPath) {\n        lassoPath.remove();\n      }\n\n      lassoPath = g\n        .append('path')\n        .attr('fill', '#8cff32') // #0bb\n        .attr('fill-opacity', 0.25)\n        .attr('stroke', '#8cff32')\n        .attr('stroke-dasharray', '3, 3');\n\n      closePath = g\n        .append('line')\n        .attr('x2', lassoPolygon[0][0])\n        .attr('y2', lassoPolygon[0][1])\n        .attr('stroke', '#8cff32')\n        .attr('stroke-dasharray', '3, 3')\n        .attr('opacity', 0);\n\n      dispatch.call('start', lasso, lassoPolygon);\n    }\n\n    function handleDrag(event) {\n      var point = [event.x, event.y];\n      lassoPolygon.push(point);\n      lassoPath.attr('d', polygonToPath(lassoPolygon));\n\n      // indicate if we are within closing distance\n      if (\n        distance(lassoPolygon[0], lassoPolygon[lassoPolygon.length - 1]) <\n        closeDistance\n      ) {\n        closePath\n          .attr('x1', point[0])\n          .attr('y1', point[1])\n          .attr('opacity', 1);\n      } else {\n        closePath.attr('opacity', 0);\n      }\n    }\n\n    function handleDragEnd(event) {\n      // remove the close path\n      closePath.remove();\n      closePath = null;\n\n      // succesfully closed\n      if (\n        distance(lassoPolygon[0], lassoPolygon[lassoPolygon.length - 1]) <\n        closeDistance\n      ) {\n        lassoPath.attr('d', polygonToPath(lassoPolygon) + 'Z');\n        dispatch.call('end', lasso, lassoPolygon);\n\n        // otherwise cancel\n      } else {\n        lassoPath.remove();\n        lassoPath = null;\n        lassoPolygon = null;\n      }\n    }\n\n    lasso.reset = function () {\n      if (lassoPath) {\n        lassoPath.remove();\n        lassoPath = null;\n      }\n\n      lassoPolygon = null;\n      if (closePath) {\n        closePath.remove();\n        closePath = null;\n      }\n    };\n  }\n\n  lasso.on = function (type, callback) {\n    dispatch.on(type, callback);\n    return lasso;\n  };\n\n  return lasso;\n}","\"use strict\";\n\nexport function Project(this_element, data, screen_width, screen_height, vis_cols, colorCategoryScale, callback1, callback2){\n  var _self = this;\n  \n  /* clean up canvas */\n  d3.select(this_element)\n    .selectAll(\"*\").remove();\n  \n  /* initial setup */\n  _self.data = data;\n  _self.vis_cols = vis_cols;\n  _self.colorCategoryScale = colorCategoryScale;\n  _self.callback1 = callback1;\n  _self.callback2 = callback2;\n  _self.embbool = _self.vis_cols['model'].get('embbool');\n  _self.lassoFiltered = false;\n  _self.filtersApplied = false;\n\n  if(!_self.embbool){\n    return;\n  }\n\n  /* canvas size */\n  _self.screen_width = screen_width;\n  _self.screen_height = screen_height;\n  _self.margin = {\"left\": 100, \"top\": 50, \"right\": 50, \"bottom\": 50};\n  _self.width = _self.screen_width - _self.margin.left - _self.margin.right;\n  _self.height = _self.screen_height - _self.margin.top - _self.margin.bottom;\n  _self.radius = 5;\n  _self.opacity = .15;\n  _self.x = d3.scaleLinear().domain(d3.extent(_self.data, d=>d[0])).range([0, _self.width]);\n  _self.y = d3.scaleLinear().domain(d3.extent(_self.data, d=>d[1])).range([_self.height, 0]);\n  _self.jsonified_data = _self.data.map((d,i)=>{return {'x': _self.x(d[0]), 'y': _self.y(d[1]), 'index': i}})\n\n  /* title */\n  d3.select(this_element)\n    .append(\"div\")\n      .style(\"text-align\", \"center\")\n      .style(\"font-weight\", \"bold\")\n      .text(\"Sentences Embedding\");\n\n  _self.svg = d3.select(this_element)\n        .style(\"width\", _self.screen_width + \"px\")\n        .style(\"height\", _self.screen_height + \"px\")\n      .append('svg')\n        .attr(\"width\", _self.screen_width)\n        .attr(\"height\", _self.screen_height)\n        .style(\"position\", \"absolute\")\n        .style(\"z-index\", 999)\n        .on(\"mousemove\", event=>{\n          var pointer = d3.pointer(event);\n          var index = _self.findClosest(pointer);\n          _self.highlight_item_by_index(index);\n          _self.callback1(index);\n        });\n\n  _self.dot = _self.svg\n        .selectAll(\".dot\")\n        .data(_self.data)\n      .join(\"circle\")\n        .attr(\"cx\", d=>_self.x(d[0]) + _self.margin.left)\n        .attr(\"cy\", d=>_self.y(d[1]) + _self.margin.top)\n        .attr(\"r\", _self.radius)\n        .style(\"fill\", \"black\")\n        .style(\"opacity\", _self.opacity)\n\n  var lassoInstance = lasso()\n    .on('end', function(lassoPolygon){\n\n      var filtered = _self.jsonified_data.filter(function(e, i){\n        return d3.polygonContains(lassoPolygon, [e['x']+_self.margin.left, e['y']+_self.margin.top]);\n      }).map(d=>d['index']);\n\n      _self.callback2(filtered);\n      _self.lassoFiltered = (filtered.length > 0)? true: false;\n\n    });\n\n  _self.svg\n    .call(lassoInstance);\n\n}\n\nProject.prototype.highlight_items_by_list_of_indices = function(indices_list) {\n  var _self = this;\n  if(!_self.embbool){\n    return;\n  }\n\n  _self.dot\n    .style(\"stroke-width\", (d,i)=> (indices_list.indexOf(i)>=0)? 2: 0)\n    .style(\"stroke\", (d,i)=> (indices_list.indexOf(i)>=0)? \"red\": \"none\")\n    .style(\"opacity\", (d,i)=> (indices_list.indexOf(i)>=0)? 1: _self.opacity);\n};\n\nProject.prototype.adjust_opacity_by_list = function(indices_list){\n  var _self = this;\n  if(!_self.embbool){\n    return;\n  }\n  if(indices_list.length == _self.data.length){\n    indices_list = [];\n  }\n  \n  if(indices_list.length > 0){\n    _self.filtersApplied = true;\n  }else{\n    _self.filtersApplied = false;\n  }\n\n  _self.dot\n    .style(\"stroke-width\", (d,i)=> (indices_list.indexOf(i)>=0)? 2: 0)\n    .style(\"stroke\", (d,i)=> (indices_list.indexOf(i)>=0)? \"red\": \"none\")\n    .style(\"opacity\", (d,i)=> (indices_list.indexOf(i)>=0)? 1: _self.opacity);\n}\n\nProject.prototype.highlight_item_by_index = function(index) {\n  var _self = this;\n  if(!_self.embbool || _self.lassoFiltered || _self.filtersApplied){\n    return;\n  }\n\n  _self.dot.each(function(d,i){\n    var elem = d3.select(this);\n\n    d3.select(this)\n      .style(\"stroke-width\", (index==i)? 2: 0)\n      .style(\"stroke\", (index==i)? \"red\": \"none\");\n\n    if(!_self.filtersApplied){\n      d3.select(this)\n        .style(\"opacity\", (index==i)? 1: _self.opacity);\n    }\n  })\n\n};\n\nProject.prototype.highlight_category = function(filtered_list, flatData) {\n  var _self = this;\n  var filtered_list = filtered_list.slice();\n  if(!_self.embbool){\n    return;\n  }\n  \n  _self.dot\n    .style(\"opacity\", (_,i)=> filtered_list.indexOf(flatData[i][_self.vis_cols['cat_col']]) >=0 ? .75 : _self.opacity)\n    .style(\"fill\", (_,i)=> filtered_list.indexOf(flatData[i][_self.vis_cols['cat_col']]) >=0 ? _self.colorCategoryScale(flatData[i][_self.vis_cols['cat_col']]): \"black\");\n};\n\nProject.prototype.findClosest = function(coords) {\n  var _self = this;\n  var index = -1;\n  var threshold = _self.radius * 2;\n  \n  _self.data.forEach(function(d,i){\n\n    // data contains the x, y positions in canvas space\n    var dist = Math.sqrt(Math.pow(coords[0] -_self.margin.left - _self.x(d[0]), 2) + Math.pow(coords[1] -_self.margin.top - _self.y(d[1]), 2));\n\n    if(dist <= threshold){\n      index = i;\n      threshold = dist;\n    }\n\n  });\n\n  return index;\n};","\"use strict\";\n\nexport function RainCloud(this_element, data, screen_width, screen_height,colorCategoryScale, vis_cols, callback){\n\tvar _self = this;\n\t/* clean up canvas */\n\td3.select(this_element)\n\t \t.selectAll(\"svg\").remove();\n\t\n\t/* initial setup */\n\t_self.data = data;\n\t_self.model_list = vis_cols['model_cols'];\n\t_self.colorCategoryScale = colorCategoryScale;\n\t_self.vis_cols = vis_cols;\n\t_self.callback = callback;\n\t_self.threshold = 20;\n\t_self.rectHeight = 20;\n\t_self.brushed_ranges = {};\n\t_self.selected_category = [];\n\t_self.filtersApplied = false;\n\n\t/* canvas size */\n\t_self.screen_width = screen_width;\n\t_self.screen_height = screen_height;\n\t_self.margin = {\"left\": 100, \"top\": 50, \"right\": 50, \"bottom\": 50};\n\t_self.width = _self.screen_width - _self.margin.left - _self.margin.right;\n\t_self.height = _self.screen_height - _self.margin.top - _self.margin.bottom;\n\n\t/* title */\n\td3.select(this_element)\n\t\t.append(\"div\")\n\t\t\t.style(\"text-align\", \"center\")\n\t\t\t.style(\"font-weight\", \"bold\")\n\t\t\t.text(\"Distributions of Mean Log Probabilities\");\n\n\t/* canvas */\n\t_self.svg = d3.select(this_element)\n\t\t.append(\"svg\")\n\t\t\t.attr(\"width\", _self.screen_width)\n\t\t\t.attr(\"height\", _self.screen_height)\n\t\t.append(\"g\")\n\t\t\t.attr(\"transform\", \"translate(\" + _self.margin.left + \",\" + _self.margin.top + \")\");\n\t\n\t_self.draw_raincloud();\n}\n\nRainCloud.prototype.brushended = function(event, model) {\n\tvar _self = this;\n\tif (!event.sourceEvent) return; // Only transition after input.\n\tif (!event.selection){\n\t\tdelete _self.brushed_ranges[model]\n\t\t_self.callback(_self.brushed_ranges);\n\t\treturn; // Ignore empty selections.\n\t}\n\n\t_self.brushed_ranges[model] = event.selection.map(_self.scale_dict[model].invert);\n\t_self.callback(_self.brushed_ranges);\n};\n\nRainCloud.prototype.draw_raincloud = function() {\n\tvar _self = this;\n\t_self.svg.selectAll(\"*\").remove();\n\n\t/* Model Scale & Axis */\n\t_self.allScoreMin = Math.floor(d3.min(_self.data, d=> d3.min(_self.model_list.map(m=> d[m]))));\n\t_self.score_min_dict = {};\n\t_self.scale_dict = {};\n\t_self.bin_dict = {};\n\t_self.freq_max_dict = {};\n\t_self.q_dict = {};\n\t_self.brush_dict = {};\n\n\t_self.model_list.forEach(function(model){\n\t\t\n\t\t_self.score_min_dict[model] = d3.min(_self.data, d=>d[model]);\n\t\t_self.scale_dict[model] = d3.scaleLinear().domain([_self.allScoreMin, 0]).range([0, _self.width]);\n\t\t_self.bin_dict[model] = d3\n\t\t\t.bin()\n\t\t\t.domain([_self.allScoreMin, 0])\n\t\t\t.thresholds(_self.threshold)\n\t\t\t.value(d=>d[model])\n\t\t\t(_self.data);\n\t\t_self.freq_max_dict[model] = d3.max(_self.bin_dict[model], d=>d.length);\n\n\t\t/* quantiles */\n\t\t_self.q_dict[model] = _self.computeQuantiles(_self.data.map(d=>d[model]));\n\t\t_self.q_dict[model][_self.vis_cols['spl_col']] = {}\n\t\t_self.q_dict[model][_self.vis_cols['spl_col']][0] = _self.computeQuantiles(_self.data.filter(d=>d[\"stereo_type\"]==0).map(d=>d[model]));\n\t\t_self.q_dict[model][_self.vis_cols['spl_col']][1] = _self.computeQuantiles(_self.data.filter(d=>d[\"stereo_type\"]==1).map(d=>d[model]));\n\n\t\t/* quantiles by cat_col */\n\t\t_self.colorCategoryScale.domain().forEach(cat=>{\n\n\t\t\tvar filteredData = _self.data.filter(d=>d[_self.vis_cols['cat_col']]==cat).slice();\n\t\t\t_self.q_dict[model][cat] = _self.computeQuantiles(filteredData.map(d=>d[model]));\n\t\t\t_self.q_dict[model][cat][_self.vis_cols['spl_col']] = {}\n\t\t\t_self.q_dict[model][cat][_self.vis_cols['spl_col']][0] = _self.computeQuantiles(filteredData.filter(d=>d[\"stereo_type\"]==0).map(d=>d[model]));\n\t\t\t_self.q_dict[model][cat][_self.vis_cols['spl_col']][1] = _self.computeQuantiles(filteredData.filter(d=>d[\"stereo_type\"]==1).map(d=>d[model]));\n\n\t\t});\n\n\t\t/* brushes */\n\t\t_self.brush_dict[model] = d3.brushX()\n\t        .extent([[0, -10], [_self.width, 10]])\n\t        .on(\"end\", event=>_self.brushended(event, model));\n\t});\n\n\t_self.allFreqMax = d3.max(Object.values(_self.freq_max_dict));\n\t_self.scalePoint = d3.scalePoint().range([0, _self.height]).domain(_self.model_list).padding(0.5);\n\t_self.freqScale = d3.scaleLinear().domain([0, _self.allFreqMax]).range([0, -_self.scalePoint.step()*.5]);\n\n\t_self.cloud_area_dict = {};\n\t_self.rectHeight = _self.scalePoint.step()*.1;\n\n\t_self.iqrArea = d3.area()\n\t\t.x0(d => _self.scale_dict[d[0]](d[1]))\n\t\t.x1(d => _self.scale_dict[d[0]](d[3]))\n\t\t.y(d => _self.scalePoint(d[0]));\n\n\t_self.iqrLine = d3.line()\n\t\t.x(d => _self.scale_dict[d[0]](d[2]))\n\t\t.y(d => _self.scalePoint(d[0]));\n\n\t_self.areaSpace = _self.svg\n\t\t.selectAll(\"g.areaSpace\")\n\t\t.data(_self.colorCategoryScale.domain())\n\t.join(\"g\")\n\t\t.attr(\"class\", \"areaSpace\")\n\t\t.each(function(cat, cat_i){\n\t\t\tvar bandArray = _self.model_list.map(m=>[m, _self.q_dict[m][cat]['q1'], _self.q_dict[m][cat]['q2'], _self.q_dict[m][cat]['q3']]);\n\n\t\t\td3.select(this)\n\t\t\t\t.append(\"path\")\n\t\t\t\t\t.attr(\"class\", \"area:\" + cat)\n\t\t\t\t\t.style(\"fill\", _self.colorCategoryScale(cat))\n\t\t\t\t\t.style(\"stroke\", \"none\")\n\t\t\t\t\t.style(\"opacity\", .2)\n\t\t\t\t\t.style(\"display\", \"none\")\n\t\t\t\t\t.attr(\"d\", _self.iqrArea(bandArray));\n\n\t\t\td3.select(this)\n\t\t\t\t.append(\"path\")\n\t\t\t\t\t.attr(\"class\", \"line:\" + cat)\n\t\t\t\t\t.style(\"stroke\", d3.rgb(_self.colorCategoryScale(cat)).darker())\n\t\t\t\t\t.style(\"fill\", \"none\")\n\t\t\t\t\t.style(\"stroke-dasharray\", \"2,2\")\n\t\t\t\t\t.style(\"opacity\", .9)\n\t\t\t\t\t.style(\"display\", \"none\")\n\t\t\t\t\t.attr(\"d\", _self.iqrLine(bandArray));\n\n\t\t});\n\n\t_self.axisSpace = _self.svg\n\t\t.selectAll(\"g.axisSpace\")\n\t\t.data(_self.model_list)\n\t.join(\"g\")\n\t\t.attr(\"class\", \"axisSpace\")\n\t\t.attr(\"transform\", function(model){\n\t\t\tvar yval = _self.scalePoint(model);\n\t\t\treturn \"translate(0, \" + yval + \")\";\n\t\t})\n\t\t.each(function(model){\n\n\t\t\td3.select(this).append(\"g\")\n\t\t\t\t.call(d3.axisBottom(_self.scale_dict[model]));\n\n\t\t\td3.select(this).append(\"text\")\n\t\t\t\t.attr(\"x\", -_self.margin.left*.1)\n\t\t\t\t.style(\"dominant-baseline\", \"middle\")\n\t\t\t\t.style(\"text-anchor\", \"end\")\n\t\t\t\t.style(\"font-weight\", \"bold\")\n\t\t\t\t.style(\"text-transform\", \"uppercase\")\n\t\t\t\t.text(model);\n\n\t\t\t_self.cloud_area_dict[model] = d3.area()\n\t\t\t\t.curve(d3.curveNatural)\n\t\t\t\t.x(d => _self.scale_dict[model]((d.x0 + d.x1)/2))\n\t\t\t\t.y0(_self.freqScale(0))\n\t\t\t\t.y1(d => _self.freqScale(d.length));\n\n\t\t\td3.select(this)\n\t\t\t\t.append(\"path\")\n\t\t\t\t.attr(\"class\", \"histCloud\")\n\t\t\t\t.attr(\"d\", d=>_self.cloud_area_dict[model](_self.bin_dict[model]))\n\t\t\t\t.style(\"opacity\", .25);\n\n\t\t\t/* box */\n\n\t\t\t_self.add_box_plot(d3.select(this), _self.scale_dict[model], 0, _self.q_dict[model]);\n\n\t\t\td3.select(this)\n\t\t\t\t.append(\"g\")\n\t\t\t\t.attr(\"class\", \"brush\")\n\t\t\t\t.call(_self.brush_dict[model]);\n\n\t\t});\n\n\t_self.line = d3.line()\n\t    .x(d => _self.scale_dict[d[0]](d[1]))\n\t    .y(d => _self.scalePoint(d[0]));\n\n\t_self.pcpSpace = _self.svg\n\t\t.append(\"g\")\n\t\t\t.attr(\"class\", \"pcpSpace\");\n};\n\n\nRainCloud.prototype.computeQuantiles = function(data){\n\tvar _self = this;\n\n\tvar q_dict = {};\n\tq_dict['q1'] = d3.quantile(data, .25);\n\tq_dict['q2'] = d3.quantile(data, .5);\n\tq_dict['q3'] = d3.quantile(data, .75);\n\tq_dict['iqr'] = q_dict['q3'] - q_dict['q1'];\n\tq_dict['r0'] = Math.max(d3.min(data), q_dict['q1'] - q_dict['iqr'] * 1.5);\n\tq_dict['r1'] = Math.min(d3.max(data), q_dict['q3'] + q_dict['iqr'] * 1.5);\n\n\treturn q_dict;\n}\n\nRainCloud.prototype.filterBy = function(filtered_data) {\n\tvar _self = this;\n\n\t_self.svg.selectAll(\"g.pcpSpace\")\n\t\t\t.remove();\n\n\t/* draw parallel coordinates */\n\tif(filtered_data.length == _self.data.length || filtered_data.length == 0){\n\t\t_self.filtersApplied = false;\n\t}else {\n\t\t_self.filtersApplied = true;\n\t\t_self.draw_pcp(filtered_data);\n\t}\n};\n\nRainCloud.prototype.draw_pcp = function(filtered_data) {\n\tvar _self = this;\n\n\t_self.svg.selectAll(\"g.pcpSpace\").remove();\n\n\t_self.pcpSpace = _self.svg\n\t\t.append(\"g\")\n\t\t\t.attr(\"class\", \"pcpSpace\");\n\n\t_self.pcpPath = _self.pcpSpace.selectAll(\"path.pcp\")\n\t\t.data(filtered_data)\n\t.join(\"path\")\n\t\t.attr(\"class\", \"pcp\")\n\t\t.style(\"fill\", \"none\")\n\t\t.style(\"stroke-width\", 1)\n\t\t.style(\"stroke\", d=>_self.selected_category.indexOf(d[_self.vis_cols['cat_col']]) >=0 ? _self.colorCategoryScale(d[_self.vis_cols['cat_col']]): \"grey\")\n\t\t.style(\"opacity\", .25)\n\t\t.attr(\"d\", datum=>{\n\t\t\treturn _self.line(_self.model_list.map(m=>[m, datum[m]]));\n\t\t});\n};\n\nRainCloud.prototype.highlight_item_by_index = function(hovered_index){\n\tvar _self = this;\n\n\tif(!_self.filtersApplied && Object.values(_self.brushed_ranges).length == 0){\n\t\t_self.draw_pcp(_self.data.filter(d=>d[\"index\"]==hovered_index));\n\t}\n\t\n\t_self.pcpPath = _self.pcpSpace.selectAll(\"path.pcp\")\n\t\t\t.style(\"opacity\", d=>(d[\"index\"]==hovered_index) ? .75: .25)\n\t\t\t.style(\"stroke-width\", d=>(d[\"index\"]==hovered_index) ? 3: 1);\n}\n\nRainCloud.prototype.highlight_category = function(filtered_list) {\n\tvar _self = this;\n\t_self.selected_category = filtered_list.slice();\n\t\n\tif(_self.svg.selectAll('path.pcp')._groups[0].length > 0){\n\t\t\n\t\t_self.pcpPath = _self.pcpSpace.selectAll(\"path.pcp\")\n\t\t\t.style(\"stroke\", d=>_self.selected_category.indexOf(d[_self.vis_cols['cat_col']]) >=0 ? _self.colorCategoryScale(d[_self.vis_cols['cat_col']]): \"grey\");\n\n\t}\n\n\t_self.areaSpace.selectAll(\"path[class*='line:']\")\n\t\t.style(\"display\", d=>(filtered_list.indexOf(d) >= 0) ? \"inline\":\"none\");\n\n\t_self.areaSpace.selectAll(\"path[class*='area:']\")\n\t\t.style(\"display\", d=>(filtered_list.indexOf(d) >= 0) ? \"inline\":\"none\");\n\n};\n\nRainCloud.prototype.show_item = function(item){\n\tvar _self = this;\n\n\t_self.pcpSpace.selectAll(\"path.pcp_temp\").remove();\n\n\t_self.pcpSpace\n\t\t.append(\"path\")\n\t\t\t.attr(\"class\", \"pcp_temp\")\t\t\n\t\t\t.style(\"fill\", \"none\")\n\t\t\t.style(\"stroke-width\", 3)\n\t\t\t.style(\"stroke\", \"red\")\n\t\t\t.style(\"opacity\", .8)\n\t\t\t.attr(\"d\", _self.line(_self.model_list.map(m=>[m, item[m][\"score\"]])));\n}\n\nRainCloud.prototype.augment_cat_and_spl = function(cat_spl_dict){\n\tvar _self = this;\n\t_self.axisSpace.selectAll(\"g.csSpace\").remove();\n\t/* */\n\tvar splBool = (cat_spl_dict['spl'].length == 0)? true : false;\n\tvar catLen = cat_spl_dict['cat'].length;\n\tvar opacity = .75;\n\n\tif(!splBool){\n\t\t_self.axisSpace.selectAll(\"path.histCloud\").style(\"display\", \"none\");\n\t\t_self.areaSpace.style(\"display\", \"none\");\t\t\t\n\t\t_self.axisSpace.each(function(model, model_i){\n\t\t\tvar csSpace = d3.select(this)\n\t\t\t\t.append(\"g\")\n\t\t\t\t\t.attr(\"class\", \"csSpace\");\n\n\t\t\tcsSpace.selectAll(\"text.splLabel\")\n\t\t\t\t.data([\"base\", \"stereotype\"])\n\t\t\t.join(\"text\")\n\t\t\t\t.attr(\"x\", 0)\n\t\t\t\t.attr(\"y\", (d,i)=> (i==0)? -20: 20)\n\t\t\t\t.style(\"opacity\", .15)\n\t\t\t\t.style(\"font-size\", \"200%\")\n\t\t\t\t.style(\"text-anchor\", 'start')\n\t\t\t\t.style(\"dominant-baseline\", (d,i)=> (i==0)? \"baseline\": \"hanging\")\n\t\t\t\t.text(d=>d)\n\n\t\t\tif(model_i < _self.model_list.length-1){\n\t\t\t\tcsSpace.append(\"line\")\n\t\t\t\t\t.attr(\"class\", \"divider\")\n\t\t\t\t\t.attr(\"x1\", 0)\n\t\t\t\t\t.attr(\"x2\", _self.width)\n\t\t\t\t\t.attr(\"y1\", _self.scalePoint.step()/2)\n\t\t\t\t\t.attr(\"y2\", _self.scalePoint.step()/2)\n\t\t\t\t\t.style(\"stroke\", \"grey\")\n\t\t\t\t\t.style(\"stroke-width\", 1.5)\n\t\t\t\t\t.style(\"stroke-dasharray\", \"1,1\");\n\t\t\t}\n\t\t\tswitch(catLen){\n\t\t\t\tcase 0:{\n\t\t\t\t\t\n\t\t\t\t\t_self.add_box_plot(csSpace, _self.scale_dict[model], -_self.scalePoint.step()/4, _self.q_dict[model][_self.vis_cols['spl_col']][0], \"black\", opacity, _self.rectHeight/2);\n\n\t\t\t\t\t_self.add_box_plot(csSpace, _self.scale_dict[model], _self.scalePoint.step()/4, _self.q_dict[model][_self.vis_cols['spl_col']][1], \"black\", opacity, _self.rectHeight/2);\n\n\t\t\t\t}\n\t\t\t\tcase 1:{\n\n\t\t\t\t\t\n\t\t\t\t\tcat_spl_dict['cat'].forEach(function(cat, cat_i){\n\n\t\t\t\t\t\t_self.add_box_plot(csSpace, _self.scale_dict[model], -_self.scalePoint.step()/4, _self.q_dict[model][cat][_self.vis_cols['spl_col']][0], _self.colorCategoryScale(cat), opacity, _self.rectHeight/2);\n\n\t\t\t\t\t\t_self.add_box_plot(csSpace, _self.scale_dict[model], _self.scalePoint.step()/4, _self.q_dict[model][cat][_self.vis_cols['spl_col']][1], _self.colorCategoryScale(cat), opacity, _self.rectHeight/2);\n\n\t\t\t\t\t})\n\n\t\t\t\t}\n\t\t\t\tdefault:{\n\n\t\t\t\t\tvar scalePointZero = d3.scalePoint()\n\t\t\t\t\t\t.domain(d3.range(catLen)).range([.6*_self.scalePoint.step(), .9*_self.scalePoint.step()]);\n\t\t\t\t\tvar scalePointOne = d3.scalePoint()\n\t\t\t\t\t\t.domain(d3.range(catLen)).range([.1*_self.scalePoint.step(), .4*_self.scalePoint.step()]);\n\t\t\t\t\t\n\t\t\t\t\tcat_spl_dict['cat'].forEach(function(cat, cat_i){\n\n\t\t\t\t\t\t_self.add_box_plot(csSpace, _self.scale_dict[model], -_self.scalePoint.step() + scalePointZero(cat_i), _self.q_dict[model][cat][_self.vis_cols['spl_col']][0], _self.colorCategoryScale(cat), opacity, _self.rectHeight/2);\n\n\t\t\t\t\t\t_self.add_box_plot(csSpace, _self.scale_dict[model], scalePointOne(cat_i), _self.q_dict[model][cat][_self.vis_cols['spl_col']][1], _self.colorCategoryScale(cat), opacity, _self.rectHeight/2);\n\n\t\t\t\t\t})\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t})\n\n\t}else{\n\n\t\t_self.axisSpace.selectAll(\"path.histCloud\").style(\"display\", \"inline\");\n\t\t_self.areaSpace.style(\"display\", \"inline\");\n\n\t}\n}\n\nRainCloud.prototype.add_box_plot = function(d3_selection, scale_x, y, q_dict, color, opacity, rectHeight) {\n\tvar _self = this;\n\n\tvar color = color || \"black\";\n\tvar opacity = opacity || .25;\n\tvar rectHeight = rectHeight || _self.rectHeight;\n\n\t/* box */\n\td3_selection\n\t\t.append(\"rect\")\n\t\t.attr(\"x\", scale_x(q_dict['q1']))\n\t\t.attr(\"y\", y - rectHeight/2)\n\t\t.attr(\"width\", (scale_x(q_dict['q3']) - scale_x(q_dict['q1'])))\n\t\t.attr(\"height\", rectHeight)\n\t\t.style(\"fill\", color)\n\t\t.style(\"opacity\", opacity);\n\n\td3_selection\n\t\t.append(\"line\")\n\t\t.attr(\"x1\", scale_x(q_dict['r0']))\n\t\t.attr(\"x2\", scale_x(q_dict['r1']))\n\t\t.attr(\"y1\", y)\n\t\t.attr(\"y2\", y)\n\t\t.style(\"stroke\", color)\n\t\t.style(\"opacity\", opacity);\n\n\td3_selection\n\t\t.append(\"circle\")\n\t\t.attr(\"cx\", scale_x(q_dict['q2']))\n\t\t.attr(\"cy\", y)\n\t\t.attr(\"r\", rectHeight*.25)\n\t\t.style(\"stroke\", \"white\")\n\t\t.style(\"fill\", color)\n\t\t.style(\"opacity\", opacity);\n\n};","\"use strict\";\n\nimport $ from 'jquery';\nimport 'bootstrap';\nimport './custom.css'\nwindow.jQuery = $;\nwindow.$ = $;\n\nexport function Select(this_element, category_list, colorCategoryScale, vis_cols, callback1, callback2, callback3){\n  var _self = this;\n\n  /* initial setup */\n  _self.category_list = category_list;\n  _self.colorCategoryScale = colorCategoryScale;\n  _self.vis_cols = vis_cols;\n  _self.callback1 = callback1;\n  _self.callback2 = callback2;\n  _self.callback3 = callback3;\n\n  _self.select = d3.select(this_element);\n\n  _self.selectOption = _self.select\n    .append(\"div\")\n      .style(\"display\", \"flex\")\n      .style(\"justify-content\", \"center\")\n      .style(\"align-items\", \"flex-start\")\n      .style(\"align-content\", \"center\");\n\n  _self.selectSplit = _self.select\n    .append(\"div\")\n      .style(\"display\", \"flex\")\n      .style(\"justify-content\", \"center\")\n      .style(\"align-items\", \"flex-start\")\n      .style(\"align-content\", \"center\");\n\n  /* highlight */\n\n  _self.selectOption.append(\"div\")\n      .attr(\"class\", \"titleDiv\")\n      .style(\"height\", \"40px\")\n      .style(\"line-height\", \"40px\")\n      .style(\"vertical-align\", \"middle\")\n      .style(\"padding\", \"2.5px\")\n      .style(\"font-weight\", \"bold\")\n    .append(\"label\")\n      .style(\"height\", \"40px\")\n      .style(\"line-height\", \"40px\")\n      .style(\"vertical-align\", \"middle\")\n      .style(\"padding\", \"2.5px\")\n      .text(\"Highlight with Colors: \");\n\n  _self.optionSpace = _self.selectOption.selectAll(\"div.optionSpace\")\n        .data(_self.category_list['value'])\n      .join(\"div\")\n        .attr(\"class\", \"optionSpace\")\n        .style(\"height\", \"40px\")\n        .style(\"line-height\", \"40px\")\n        .style(\"vertical-align\", \"middle\")\n        .style(\"text-anchor\", \"left\")\n        .style(\"padding\", \"2.5px\");\n        \n  _self.optionSpace.append(\"input\")\n    .attr(\"type\", \"checkbox\")\n    .attr(\"class\", \"optionSpace\")\n    .attr(\"name\", d=>d)\n    .style(\"height\", \"40px\")\n    .style(\"line-height\", \"40px\")\n    .style(\"vertical-align\", \"middle\")\n    .style(\"padding\", \"2.5px\")\n    .attr(\"id\", d=>\"input-\" + d);\n\n  _self.optionSpace.append(\"label\")\n    .attr(\"for\", d=>\"input-\" + d)\n    .style(\"height\", \"40px\")\n    .style(\"line-height\", \"40px\")\n    .style(\"vertical-align\", \"middle\")\n    .style(\"padding\", \"2.5px\")\n    .text(d=>d);\n\n  _self.optionSpace.on(\"click\", (event, d)=>{\n      \n      var cat = Array.from(_self.selectOption.selectAll(\"input[type=checkbox].optionSpace\")._groups[0]).filter(d=>d.checked).map(d=>d.name);\n      var spl = Array.from(_self.selectSplit.selectAll(\"input[type=checkbox].splitSpace\")._groups[0]).filter(d=>d.checked).map(d=>d.name);\n\n      var cat_spl_dict = {'cat': cat, 'spl': spl};\n\n      _self.callback1(cat);\n      _self.callback2(cat_spl_dict);\n\n    });\n\n  /* split */\n\n  _self.selectSplit.append(\"div\")\n      .attr(\"class\", \"titleDiv\")\n      .style(\"height\", \"40px\")\n      .style(\"line-height\", \"40px\")\n      .style(\"vertical-align\", \"middle\")\n      .style(\"padding\", \"2.5px\")\n      .style(\"font-weight\", \"bold\")\n    .append(\"label\")\n      .style(\"height\", \"40px\")\n      .style(\"line-height\", \"40px\")\n      .style(\"vertical-align\", \"middle\")\n      .style(\"padding\", \"2.5px\")\n      .text(\"Split Distributions: \");\n\n  _self.splitSpace = _self.selectSplit.selectAll(\"div.splitSpace\")\n        .data([_self.vis_cols['spl_col']])\n      .join(\"div\")\n        .attr(\"class\", \"splitSpace\")\n        .style(\"height\", \"40px\")\n        .style(\"line-height\", \"40px\")\n        .style(\"vertical-align\", \"middle\")\n        .style(\"text-anchor\", \"left\")\n        .style(\"padding\", \"2.5px\");\n        \n  _self.splitSpace.append(\"input\")\n    .attr(\"type\", \"checkbox\")\n    .attr(\"class\", \"splitSpace\")\n    .attr(\"name\", d=>d)\n    .style(\"height\", \"40px\")\n    .style(\"line-height\", \"40px\")\n    .style(\"vertical-align\", \"middle\")\n    .style(\"padding\", \"2.5px\")\n    .attr(\"id\", d=>\"input-\" + d);\n\n  _self.splitSpace.append(\"label\")\n    .attr(\"for\", d=>\"input-\" + d)\n    .style(\"height\", \"40px\")\n    .style(\"line-height\", \"40px\")\n    .style(\"vertical-align\", \"middle\")\n    .style(\"padding\", \"2.5px\")\n    .text(d=>d);\n\n  _self.splitSpace.on(\"click\", (event, d)=>{\n      \n      var cat = Array.from(_self.selectOption.selectAll(\"input[type=checkbox].optionSpace\")._groups[0]).filter(d=>d.checked).map(d=>d.name);\n      var spl = Array.from(_self.selectSplit.selectAll(\"input[type=checkbox].splitSpace\")._groups[0]).filter(d=>d.checked).map(d=>d.name);\n\n      var cat_spl_dict = {'cat': cat, 'spl': spl};\n      _self.callback2(cat_spl_dict);\n\n    });\n\n  if(!_self.vis_cols['model'].get('inputelement')){\n    console.log(_self.vis_cols['model'].get('inputelement'));\n    return;\n  }\n\n  _self.textSpace = _self.select\n    .append(\"div\")\n      .style(\"height\", \"40px\")\n      .style(\"line-height\", \"40px\")\n      .style(\"padding\", \"2.5px\")\n      .style(\"display\", \"flex\")\n      .style(\"justify-content\", \"center\")\n      .style(\"align-items\", \"flex-start\")\n      .style(\"align-content\", \"center\");\n\n  _self.textSpace\n    .append(\"label\")\n      .style(\"height\", \"30px\")\n      .style(\"line-height\", \"30px\")\n      .style(\"vertical-align\", \"middle\")\n      .style(\"padding\", \"2.5px\")\n      .style(\"font-weight\", \"bold\")\n      .text(\"Type a sentence (Max Chars: 500): \")\n\n  _self.textSpace\n    .append(\"input\")\n      .style(\"width\", \"50%\")\n      .style(\"height\", \"30px\")\n      .style(\"line-height\", \"30px\")\n      .style(\"vertical-align\", \"middle\")\n      .attr(\"type\", \"text\")\n      .attr(\"id\", \"inputText\")\n      .attr(\"name\", \"inputText\")\n      .attr(\"maxlength\", 1000);\n\n  _self.textSpace\n    .append(\"button\")\n      .attr(\"class\", \"btn btn-default\")\n      .style(\"cursor\", \"pointer\")\n      .style(\"width\", \"60px\")\n      .style(\"height\", \"30px\")\n      .style(\"line-height\", \"30px\")\n      .style(\"vertical-align\", \"middle\")\n      .text(\"Submit\")\n      .on(\"click\", ()=>{\n\n        var text = d3.select(\"input#inputText\").node().value;\n        var hiddenValue = d3.select(\"input#_hiddenVALUE\" + _self.vis_cols[\"model_id\"]).node();\n        hiddenValue.value = text;\n        hiddenValue.dispatchEvent(new Event('input', { 'bubbles': true }));\n        _self.broadcastInputValue();\n        \n      });\n\n  _self.selectSpinner = _self.textSpace\n    .append(\"div\") \n      .attr(\"class\", \"spinner\")\n      .style(\"position\", \"absolute\")\n      .style(\"right\", \"50px\")\n      .style(\"display\", \"none\")\n      .style(\"border\", \"4px solid #f3f3f3\")\n      .style(\"border-top\", \"4px solid #3498db\")\n      .style(\"border-radius\", \"50%\")\n      .style(\"width\", \"20px\")\n      .style(\"height\", \"20px\")\n      .style(\"-webkit-animation\", \"spin 2s linear infinite\")\n      .style(\"animation\", \"spin 2s linear infinite\")\n      .style(\"line-height\", \"20px\")\n      .style(\"padding\", \"2.5px\")\n      .style(\"justify-content\", \"center\")\n      .style(\"align-items\", \"flex-start\")\n      .style(\"align-content\", \"center\");\n\n}\n\nSelect.prototype.broadcastInputValue = async function(){\n  var _self = this;\n\n  _self.selectSpinner.style(\"display\", \"inline\");\n\n  if(Object.keys(_self.vis_cols['model'].get('inputValue')).length == 0){\n    await __delay__(2000);\n  }\n\n  while (Object.keys(_self.vis_cols['model'].get('inputValue')).length === 0 || _self.vis_cols['model'].get('inputValue')['sent'] != _self.vis_cols['model'].get('textValue'))\n    await __delay__(1000);\n\n  _self.callback3(_self.vis_cols['model'].get('inputValue'));\n  _self.selectSpinner.style(\"display\", \"none\");\n\n  function __delay__(timer) {\n      return new Promise(resolve => {\n          timer = timer || 2000;\n          setTimeout(function () {\n              resolve();\n          }, timer);\n      });\n  };\n\n}\n","\"use strict\";\n\nexport function Table(this_element, data, screen_width, screen_height, colorCategoryScale, vis_cols, callback){\n  var _self = this;\n  /* clean up canvas */\n  d3.select(this_element)\n    .selectAll(\"*\").remove();\n  \n  /* initial setup */\n  _self.data = data;\n  _self.keys = vis_cols['other_cols'].concat([vis_cols['cat_col'], vis_cols['sent_col']]).concat(vis_cols['model_cols']);\n  _self.colorCategoryScale = colorCategoryScale;\n  _self.selected_category = [];\n  _self.vis_cols = vis_cols;\n  _self.callback = callback;\n\n  /* canvas size */\n  _self.screen_width = screen_width;\n  _self.screen_height = screen_height;\n  _self.margin = {\"left\": 100, \"top\": 50, \"right\": 50, \"bottom\": 50};\n  _self.width = _self.screen_width - _self.margin.left - _self.margin.right;\n  _self.height = _self.screen_height - _self.margin.top - _self.margin.bottom;\n\n  /* title */\n  d3.select(this_element)\n    .append(\"div\")\n      .style(\"text-align\", \"center\")\n      .style(\"font-weight\", \"bold\")\n      .text(\"Table of Sentences\");\n\n  _self.table = d3.select(this_element)\n        .style(\"width\", _self.screen_width + \"px\")\n        .style(\"height\", _self.screen_height + \"px\")\n        .style(\"overflow\", \"hidden auto\")\n      .append('table')\n        .style(\"border-collapse\", \"collapse\")\n        .style(\"border\", \"2px black solid\")\n        .on(\"mouseleave\", (event,d)=>{\n          _self.callback(-1);\n        });\n\n  _self.table.append(\"thead\").append(\"tr\")\n    .selectAll(\"th\")\n    .data(_self.keys)\n  .join(\"th\")\n    .text(d=>d)\n    .style(\"border\", \"1px black solid\")\n    .style(\"padding\", \"5px\")\n    .style(\"background-color\", \"lightgray\")\n    .style(\"font-weight\", \"bold\")\n    .style(\"font-size\", \"80%\")\n    .style(\"text-transform\", \"uppercase\");\n\n  _self.rows = _self.table.append(\"tbody\")\n    .selectAll(\"tr\").data(_self.data)\n  .join(\"tr\")\n    .attr(\"class\", \"rows\")\n    .style(\"background-color\", d=>_self.selected_category.indexOf(d[_self.vis_cols['cat_col']]) >=0 ? d3.rgb(_self.colorCategoryScale(d[_self.vis_cols['cat_col']])).copy({opacity: 0.25}): \"white\")\n    .on(\"mouseenter\", (event, d)=>{\n      _self.callback(d[\"index\"]);\n    });\n\n  _self.rows.selectAll(\"td\")\n    .data(d=>_self.keys.map(k=>d[k]))\n    .join(\"td\")\n    .style(\"border\", \"1px black solid\")\n    .style(\"padding\", \"5px\")\n    .style(\"font-size\", \"12px\")\n    .text(d=>isNaN(d)? d: Number.isInteger(d)? d: parseFloat(d).toFixed(3))\n  \n}\n\nTable.prototype.filterBy = function(filtered_data) {\n  var _self = this;\n\n  _self.rows = _self.table.select(\"tbody\")\n    .selectAll(\"tr.rows\").data(filtered_data, d=>d)\n  .join(enter=>{\n    return enter.append(\"tr\").attr(\"class\", \"rows\").selectAll(\"td\")\n    .data(d=>_self.keys.map(k=>d[k]))\n    .join(\"td\")\n    .style(\"border\", \"1px black solid\")\n    .style(\"padding\", \"5px\")\n    .style(\"font-size\", \"12px\")\n    .text(d=>isNaN(d)? d: Number.isInteger(d)? d: parseFloat(d).toFixed(3))\n  },\n    update=>{\n      return update.selectAll(\"td\")\n    .data(d=>_self.keys.map(k=>d[k]))\n    .join(\"td\")\n    .style(\"border\", \"1px black solid\")\n    .style(\"padding\", \"5px\")\n    .style(\"font-size\", \"12px\")\n    .text(d=>isNaN(d)? d: Number.isInteger(d)? d: parseFloat(d).toFixed(3))\n    },\n    exit=>{\n      return exit.remove();\n    });\n\n  _self.rows = _self.table.selectAll(\"tr.rows\")\n    .on(\"mouseenter\", (event,d)=>{\n      _self.callback(d[\"index\"]);\n    });\n\n  _self.table.selectAll(\"tr.rows\")\n    .style(\"background-color\", d=>_self.selected_category.indexOf(d[_self.vis_cols['cat_col']]) >=0 ? d3.rgb(_self.colorCategoryScale(d[_self.vis_cols['cat_col']])).copy({opacity: 0.25}): \"white\");\n\n};\n\nTable.prototype.highlight_category = function(filtered_list) {\n  var _self = this;\n  _self.selected_category = filtered_list.slice();\n  _self.rows = _self.table.selectAll(\"tr.rows\")\n    .style(\"background-color\", d=>_self.selected_category.indexOf(d[_self.vis_cols['cat_col']]) >=0 ? d3.rgb(_self.colorCategoryScale(d[_self.vis_cols['cat_col']])).copy({opacity: 0.25}): \"white\");\n};\n\nTable.prototype.highlight_item_by_index = function(index){\n  var _self = this;\n  if(index == -1){\n    _self.rows.style(\"background-color\", \"white\");\n    return;\n  }\n  \n  var textContent = _self.data[index][_self.vis_cols['sent_col']];\n  var firstHit = true;\n\n  _self.rows = _self.table.selectAll(\"tr.rows\")\n      .each(function(d){\n\n        var this_elem = d3.select(this);\n        this_elem.style(\"background-color\", \"white\");\n\n        if(d[_self.vis_cols['sent_col']] == textContent){\n\n          this_elem.style(\"background-color\", d3.rgb(_self.colorCategoryScale(d[_self.vis_cols['cat_col']])).copy({opacity: 0.25}));\n\n          if(firstHit){\n            this_elem.node().scrollIntoView({block: \"nearest\", inline: \"nearest\"}); // doesn't work in IE or Safari\n            firstHit = false;\n          }\n\n        }\n\n      })\n\n}","import api from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../node_modules/css-loader/dist/cjs.js!./custom.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};"],"names":[],"sourceRoot":""}